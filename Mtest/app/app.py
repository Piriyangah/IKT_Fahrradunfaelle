import streamlit as st
import pandas as pd
import numpy as np
from os import path

st.set_page_config(
    page_title="Machine learning",
    page_icon="üö≤",
)

st.title("Pr√§diktive Analyse von Fahrradunf√§llen basierend auf Beinahe-Unf√§llen und realen Unf√§llen aus dem Jahr 2022")

st.markdown("### 1. √úberblick √ºber die Projektaufgabe")
st.markdown("""
    Im Rahmen unseres Projekts zur pr√§diktiven Analyse von Fahrradunf√§llen untersuchen wir Beinahe-Unf√§lle und reale Unf√§lle, 
    die im Jahr 2022 erfasst wurden. Ziel ist es, Risikofaktoren f√ºr Fahrradunf√§lle zu identifizieren und darauf aufbauend Ma√ünahmen 
    zur Verbesserung der Verkehrssicherheit f√ºr Radfahrer zu entwickeln. Durch die Kombination der verschiedenen Datenquellen und die Nutzung maschineller
     Lernmethoden sollen Gefahrenstellen vorhergesagt und pr√§ventive Strategien entwickelt werden."""
)


st.markdown("### 2. Motivation und Relevanz")
st.markdown(""" Unsere Motivation ist es, die Sicherheit von Radfahrern zu erh√∂hen und gleichzeitig das Vertrauen in das Fahrrad als umweltfreundliches und gesundes Fortbewegungsmittel zu st√§rken.
             Wir m√∂chten eine App oder eine Funktion in Google Maps entwickeln, die sowohl f√ºr Radfahrer als auch f√ºr Autofahrer auf besonders gef√§hrliche Stra√üenabschnitte aufmerksam macht, um Unf√§lle zu verhindern. 
""")

st.markdown("### 3. Beschreibung der verwendeten Daten und Methodik ")
st.markdown("### 3. 1 Datens√§tze")

st.markdown(""" F√ºr unsere Analyse haben wir zwei Haupt-Datens√§tze verwendet. Der eine ist ein  Datensatz zu Beinahe-Unf√§llen und 
            der andere zu realen Unf√§llen. Bei Beinahe-Unf√§llen handelt es sich um Situationen, in denen es fast zu Unf√§llen gekommen ist. 
            Man kann aus dem Datensatz  Beinahe-Unf√§lle wertvolle Hinweise auf risikobehaftete Stra√üenabschnitte und Verhaltensweisen ermitteln. 
            Da beinahe Unf√§lle h√§ufiger passieren als reale Unf√§lle bieten die eine breitere Datenbasis f√ºr statistische Analysen.
            
            
    Die Beinahe-Unf√§lle haben wir von der Simra(Sicherheit im Radverkehr) Projekt. 
            Im Rahmen des SimRa-Projekts wurden Daten dar√ºber gesammelt, wo sich in der Stadt Gefahren f√ºr Radfahrer h√§ufen, 
            welcher Art diese sind, ob sie zeitlich oder √∂rtlich geh√§uft auftreten und wo die Haupt Verkehrsstr√∂me auf dem Rad liegen. 
            Im Rahmen des Projekts wurde eine Smartphone-App entwickelt, die Routen mit Hilfe von GPS-Daten aufzeichnet und mit Hilfe von
            Beschleunigungssensoren gef√§hrliche Situationen erkennt - wie pl√∂tzliches Bremsen, Ausweichen oder sogar einen Sturz.
            Nach der Fahrt werden die Radfahrer gebeten, diese erkannten Gefahrensituationen zu kategorisieren und zu kommentieren,
            nicht erkannte Gefahrensituationen hinzuzuf√ºgen und einen Upload auf die Projektserver zu genehmigen.
            
""")

data = pd.read_csv('../Berlin-incidents.csv', on_bad_lines='skip') #path folder of the data file

st.write(data) 
st.write("Beinahunfall tabelle")    

st.map(data)

st.markdown (""" Als zweiten Datensatz haben wir reale Unf√§lle genommen. Der Datensatz stammt aus den offiziellen Aufzeichnungen der Verkehrsbeh√∂rden (Unfallatlas Deutschland). 
            Die realen Unfalldatensatz hingegen liefern uns konkrete Informationen √ºber tats√§chlich geschehene Unf√§lle, einschlie√ülich die Gr√∂√üe des Unfalls, 
            der beteiligten Verkehrsteilnehmer und die Umst√§nden davon. Da uns hier konkrete Ursachen zum Beispiel wie Geschwindigkeits√ºberschreitung, 
            Ablenkung und Mangel am Fahrzeug ist, ist es m√∂glich, eine genaue Ursachenanalyse zu unternehmen.
            
            """)


data = pd.read_csv('../Unfallorte2022_LinRef.csv', sep=",", on_bad_lines='skip') #path folder of the data file

st.write(data) 
st.write("Unfallorte tabelle 2022")    

#st.map(data)

st.markdown("### 3. 2 Methodik")

st.markdown("""
            Der Prozess der Vorhersage von Fahrradunf√§llen war keine einfache Aufgabe. Wir begannen damit, tief in den Datensatz einzutauchen und zu versuchen,
             ihn so gut wie m√∂glich zu verstehen, indem wir mehrere Fragen, wie die Bedeutung jeder Spalten√ºberschrift, welche Art von Werten in der Spalte stehen und wie oft sie vorkommen.
W√§hrend des Prozesses wurden viele Spalten umbenannt, damit sie f√ºr unsere Leser leicht verst√§ndlich sind, und wir haben auch einige Funktionen entwickelt, z. B. haben wir die Uhrzeit, das Datum usw. aus der Spalte Zeitstempel (ts) im Datensatz f√ºr Beinahe-Unf√§lle erzeugt. Danach haben wir einige Spalten entfernt, die keinen gro√üen Einfluss auf die Unf√§lle haben, und somit auch nicht auf die Vorhersagen haben.

""")






st.markdown(""" Um die Unfallanalyse gezielt auf Berlin auszurichten, wurden zun√§chst die entsprechenden Daten aus einer CSV-Datei geladen. Dies geschah mit Hilfe der Bibliothek pandas. 
            Zuerst wurde der Pfad zur Datei Unfallorte2022_LinRef.csv definiert und anschlie√üend die Datei in ein DataFrame eingelesen. 
            Der Datensatz enth√§lt 256.492 Eintr√§ge, die verschiedene Merkmale wie Ortsangaben, Zeitpunkte, Lichtverh√§ltnisse und Verkehrsteilnehmer
              (z.B. Radfahrer, PKW-Fahrer) der jeweiligen Unf√§lle umfassen. """)



st.markdown("### 4. Datenanalyse ")
#st.markdown("### 4.1 Datenaufbereitung und Visualisierung der Unfallorte in Berlin")
st.markdown("### 4.1 Datenaufbereitung Unfall-Datensatz")

st.markdown("""
    
Verschiedene Merkmale der Unf√§lle hinsichtlich ihrer H√§ufigkeit wurde analysiert und in Form von Histogrammen dargestellt.
Die ausgew√§hlten Spalten umfassten unter anderem den Monat des Unfalls (UMONAT), die Uhrzeit (USTUNDE), den Wochentag (UWOCHENTAG) sowie die Lichtverh√§ltnisse
(ULICHTVERH). Ziel dieser Analyse war es, herauszufinden, ob bestimmte Zeitr√§ume oder Bedingungen mit einer erh√∂hten Unfallh√§ufigkeit f√ºr Radfahrer korrelieren.

""")

st.image("1.jpeg")
st.image("2.jpeg")
st.image("3.jpeg")
st.image("4.jpeg")
st.image("5.jpeg")
st.image("11.jpeg")
st.image("12.jpeg")

st.markdown("""
Dar√ºber hinaus wurde eine Einteilung in Gefahrenklassen vorgenommen, basierend auf den oben genannten Merkmalen. Jede dieser Kategorien wurde nach Risiko in "leicht", "mittel" und "schwer" klassifiziert. Zum Beispiel gelten die Monate Januar und Februar als "leicht", w√§hrend die Sommermonate aufgrund des h√∂heren Verkehrsaufkommens als "schwer" eingestuft wurden. Ebenso wurden Uhrzeiten, Wochentage, Lichtverh√§ltnisse und Stra√üenbedingungen entsprechend kategorisiert. Hier ist die Tabelle dazu:
            """)
st.image("tabelle.png")

st.markdown("### 4.2 Visualisierung ")
st.markdown("""
Zur Visualisierung der Unfalldaten wurde die Bibliothek Geopandas benutzt, um die geografischen Unfallorte auf Karten darzustellen. Die bereits in den vorherigen Schritten gefilterten und bereinigten Daten wurden in ein GeoDataFrame konvertiert, um die r√§umliche Komponente der Unfalldaten zu ber√ºcksichtigen.
Zun√§chst wurden die Koordinaten, die in den Spalten LINREFX und LINREFY gespeichert sind, √ºberpr√ºft und, falls n√∂tig, von String- in das Format float64 umgewandelt. Diese Umwandlung war notwendig, um die Koordinaten in geometrische Punkte zu konvertieren, die f√ºr die Visualisierung auf Karten erforderlich sind. Nach der Konvertierung wurde mithilfe der Shapely-Bibliothek eine geometrische Spalte aus den Koordinatenpunkten erstellt, die als Basis f√ºr die geod√§tische Analyse diente.
Au√üerdem wurde eine einfache Visualisierung mit Matplotlib erstellt, um die Verteilung der Unfallorte basierend auf der Regionsbezeichnung darzustellen. Diese Visualisierungen, sowohl in Folium als auch in Matplotlib, bieten eine umfassende und benutzerfreundliche M√∂glichkeit an, die Unfalldaten in Berlin zu analysieren bzw. zu kennzeichnen.

            """)

st.image("6.jpeg")
st.image("7.jpeg")
#st.image("8.jpeg")
st.image("9.jpeg")


st.markdown("### 5. Beschreibung der Ergebnissen")
st.markdown("""
            
Das Modell des maschinellen Lernens, f√ºr das wir uns entschieden haben, ist die Klassifizierung. Es wurde dem Beinahunfall-Datensatz die Spalte ‚ÄúScary‚Äù als Zielvariable ausgew√§hlt. Bei dem Unfall-Datensatz wurde eine Spalte ‚Äúrisk_level‚Äù erstellt und als Zielvariable ausgew√§hlt, welche aus den Ergebnissen von 4.1 Datenaufbereitung Unfall-Datensatz ausgewertet wurde.
Die Ergebnisse des Modells f√ºr den Unfalldatensatz zeigen eine Genauigkeit von 1.0 (100 %), was darauf hindeutet, dass das Modell bei allen Datenpunkten erfolgreich funktioniert hat. Es gibt jedoch Zweifel an dieser hohen Genauigkeit, da das Analyse-Diagramm nur einen Balken f√ºr ‚ÄûKategorie‚Äú zeigt, w√§hrend andere Merkmale nicht sichtbar sind. Dies k√∂nnte darauf hindeuten, dass das Modell m√∂glicherweise nicht alle relevanten Einflussfaktoren angemessen ber√ºcksichtigt.
Ebenso k√∂nnte dies ein Hinweis auf ein sogenanntes ‚ÄúOverfitting‚Äù sein, da eine Genauigkeit von 1 sehr unwahrscheinlich f√ºr ein Modell ist. Das Ergebnis aus dem Datensatz f√ºr Beinahe-Unf√§lle lag dagegen bei 0.74, welches realistisch von Zahl her ist. 

            """)
st.image("unfall_perf.png", caption="Unfalldatensatz performance")
st.image("performance.png", caption="Beinahunfall datensatz performance")
st.image("feature importance.png")


st.markdown("### 6. Reflexion")
st.markdown("""
Zu Beginn waren wir begeistert von der Aussicht, Fahrradunf√§lle anhand der verf√ºgbaren Daten vorhersagen zu k√∂nnen. W√§hrend der Datenexploration begannen wir jedoch, uns zu fragen, was der eigentliche Machine-Learning-Aspekt unseres Projekts ist und wie wir ihn effektiv zur L√∂sung unserer Problemstellung einsetzen k√∂nnen. Dies lag vor allem daran, dass unsere Ergebnisse zu diesem Zeitpunkt wenig oder gar nichts mit Machine Learning zu tun hatten. In Anbetracht dessen kam der Gedanke auf, dass m√∂glicherweise kein maschinelles Lernen erforderlich sei und dass die Fragestellung durchaus mit statistischen Methoden gel√∂st werden k√∂nnte.

Trotz dieser Bedenken entschieden wir uns, verschiedene Modelle und Ideen zu testen, um das Potenzial von Machine Learning zu erkunden. Der Einfachheit halber haben wir beschlossen, jeden Datensatz einzeln zu analysieren, um ein besseres Verst√§ndnis f√ºr die spezifischen Merkmale und Muster in den Daten zu erlangen.

F√ºr die Zukunft planen wir, die Datens√§tze zusammenzuf√ºhren und eine umfassendere Analyse durchzuf√ºhren. Durch die Kombination der Daten k√∂nnen wir wertvolle Erkenntnisse gewinnen und die Ergebnisse vergleichen, um √Ñhnlichkeiten und Unterschiede zu identifizieren. Dies k√∂nnte nicht nur unsere Vorhersagemodelle verbessern, sondern auch neue Perspektiven auf die Risikofaktoren von Fahrradunf√§llen er√∂ffnen. Dar√ºber hinaus w√§re es sinnvoll, verschiedene Machine-Learning-Algorithmen zu evaluieren, um die beste Methode zur Vorhersage von Fahrradunf√§llen zu ermitteln. Wir selber hatten die Idee, eine Art Feature in Navigationssysteme zu integrieren. Wenn es auf Fahrradfahrer steht, dass es dann wie bei dem Auto, beim Stau, bei dem Fahrradfahrer, dann eine Art Farbkennung oder Beep Ger√§usche tauchen und Sie vor Gefahren bewahren. 
""")
